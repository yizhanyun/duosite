const deepmerge = require('deepmerge')
const fastifyStatic = require('fastify-static')
const path = require('path')

const getHandler = require('./getHandler')
const { resolveUrlToFile } = require('../utils')

const requireOption = path => {
  try {
    return require(path)
  } catch (e) {
    return undefined
  }
}

//  Plugin to handle each subsite's request

// opts: { prefix, _duosite: { siteRoot }}

const subsite = function (fastify, opts, done) {
  const {
    prefix: site,
    _duosite: { siteRoot },
  } = opts

  const sharedSetting = requireOption(`${siteRoot}/settings`) || {}
  const byEnironmentSetting =
    process.env.NODE_ENV === 'production'
      ? requireOption(`./${siteRoot}/settings.production`) || {}
      : requireOption(`./${siteRoot}/settings.development`) || {}

  const settings = deepmerge(sharedSetting, byEnironmentSetting)

  const {
    staticRoot = 'static', // Root for statics that are serverved as is.
    staticCompiledRoot = 'bundle', // Root for statics that are generated by bundlers
  } = settings

  fastify.register(fastifyStatic, {
    root: path.join(siteRoot, staticRoot),
    prefix: `/${staticRoot}`,
  })

  if (staticCompiledRoot !== staticRoot)
    fastify.register(fastifyStatic, {
      root: path.join(siteRoot, staticCompiledRoot),
      prefix: `/${staticCompiledRoot}`,
      decorateReply: false, // the reply decorator has been added by the first plugin registration
    })

  fastify.decorateRequest('_duosite', null)

  // enhance request
  fastify.addHook('preHandler', (request, reply, done) => {
    request._duosite = { settings, siteRoot }
    done()
  })

  fastify.route(getHandler)

  // fastify.get('/', async (request, reply) => {
  //   console.log(request._duosite)
  //   return { hello: 'world from plugin' }
  // })

  done()
}

module.exports = subsite
