const deepmerge = require('deepmerge')
const fastifyStatic = require('fastify-static')
const path = require('path')

const {
  genericGetRoute,
  buildFileRouter,
  buildApiRouter,
} = require('./getHandler')
const {
  buildFileRoutingTable,
  buildApiRoutingTable,
  buildApiRouteUrlVariableTable,

  buildFileRouteUrlVariableTable,
} = require('../utils')

const siteRootName = 'sites'

const requireOption = path => {
  try {
    return require(path)
  } catch (e) {
    return undefined
  }
}

const isProduction = process.env.NODE_ENV === 'production'

//  Plugin to handle each subsite's request

// opts: { prefix, _duosite: { siteRoot }}

const subsite = function (fastify, opts, done) {
  const { _duosite, prefix: site } = opts

  const { global } = _duosite

  const { root, settings: globalSettings, i18nMessages, lang } = global

  const siteRoot = path.join(
    root,
    siteRootName,
    site,
    isProduction ? '.production' : ''
  )
  // load subsite settings
  const sharedSetting = requireOption(`${siteRoot}/settings`) || {}
  const byEnironmentSetting =
    process.env.NODE_ENV === 'production'
      ? requireOption(`./${siteRoot}/settings.production`) || {}
      : requireOption(`./${siteRoot}/settings.development`) || {}

  const settings = deepmerge(sharedSetting, byEnironmentSetting)

  const {
    staticRoot = 'static', // Root for statics that are serverved as is.
    staticCompiledRoot = 'bundle', // Root for statics that are generated by bundlers
    viewEngine = {},
  } = settings

  // Build global services

  const buildSiteServices = requireOption(`${siteRoot}/src/siteServices`)

  const siteServices = buildSiteServices
    ? buildSiteServices(globalSettings, settings, root)
    : {}

  // build site  enhancer

  const enhance = requireOption(`${siteRoot}/src/enhancer`)

  // build site engine

  const { name, ext, options = {} } = viewEngine
  let engine

  if (name && ext) {
    const buildEngine = requireOption(`${siteRoot}/plugins/engines`)

    if (buildEngine) {
      // use local provided engines

      engine = buildEngine(siteRoot, name, ext, options, lang, i18nMessages)
    } else {
      // use global engines
      const buildEngine = requireOption('./engines')
      if (buildEngine) {
        engine = buildEngine(siteRoot, name, ext, options, lang, i18nMessages)
      }
    }
  }

  // Add static handlers

  fastify.register(fastifyStatic, {
    root: path.join(siteRoot, 'public', staticRoot),
    prefix: `/${staticRoot}`,
  })

  if (staticCompiledRoot !== staticRoot) {
    fastify.register(fastifyStatic, {
      root: path.join(siteRoot, 'public', staticCompiledRoot),
      prefix: `/${staticCompiledRoot}`,
      decorateReply: false, // the reply decorator has been added by the first plugin registration
    })
  }

  fastify.decorateRequest('_duosite', null)

  // enhance request with _duosite

  const duositeConfig = {
    ..._duosite,
    site: {
      root: siteRoot,
      settings,
      engine,
      services: siteServices,
    },
  }
  fastify.addHook('preHandler', (request, reply, done) => {
    request._duosite = duositeConfig
    done()
  })

  fastify.route(genericGetRoute)

  try {
    const fileRoutingTable = buildFileRoutingTable(
      path.join(siteRoot, 'pages'),
      ext
    )

    const fileRoutingUrlVariableTable = buildFileRouteUrlVariableTable(
      fileRoutingTable
    )

    fileRoutingUrlVariableTable.forEach(tables => {
      tables.forEach(table => {
        const router = buildFileRouter(table)
        fastify.route(router)
      })
    })

    const apiRoutingTable = buildApiRoutingTable(
      path.join(siteRoot, 'api'),
      '.js'
    )
    const apiRoutingUrlVariableTable = buildApiRouteUrlVariableTable(
      apiRoutingTable
    )

    apiRoutingUrlVariableTable.forEach(tables => {
      tables.forEach(table => {
        const router = buildApiRouter(table, siteRoot)
        fastify.route(router)
      })
    })
  } catch (e) {
    console.log(e)
  }

  enhance && enhance(fastify, duositeConfig)

  done()
}

module.exports = subsite
